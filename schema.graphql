scalar GraphQLDate

enum Type {
    Flower
    Edible
    Topical
    PreRoll
    Concentrate
    Beverage
}

enum StatusType {
    Listed
    Unlisted
}

enum BusinessType {
    Dispensary
    Cultivator
}

type Product {
    _id: ID!
    id: Int!
    title: String!
    status: StatusType!
    type: Type!
    poster: String
    created: GraphQLDate!
    quantity: Float
    unit: String
    price: Float
    description: String
}

type Request {
    _id: ID!
    id: Int!
    title: String!
    status: StatusType!
    type: Type!
    poster: String
    created: GraphQLDate!
    description: String
}

type ProductCounts {
    poster: String!
    Flower: Int
    Edible: Int
    Topical: Int
    PreRoll: Int
    Concentrate: Int
    Beverage: Int
}

type RequestCounts {
    poster: String!
    Flower: Int
    Edible: Int
    Topical: Int
    PreRoll: Int
    Concentrate: Int
    Beverage: Int
}

type ProductListWithPages {
    products: [Product!]!
    pages: Int
}

type RequestListWithPages {
    requests: [Request!]!
    pages: Int
}

type User {
    _id: ID!
    signedIn: Boolean!
    username: String!
    password: String!
    firstName: String!
    lastName: String!
    phone: String!
    email: String!
    businessName: String!
    businessWebsite: String!
    businessType: BusinessType!
}

type LoginResponse {
    token: String
    user: User
}

"Toned down Product, used as inputs, without server generated values."
input ProductInputs {
    title: String!
    status: StatusType = Listed
    type: Type!
    poster: String!
    description: String
    quantity: Float
}

input RequestInputs {
    title: String!
    status: StatusType = Listed
    type: Type!
    poster: String!
    description: String
}

""""Inputs for productUpdate: all are optional. Whichever is specified will
be set to the given value, undefined fields will remain unmodified."""
input ProductUpdateInputs {
    title: String
    type: Type
    status: StatusType
    poster: String
    quantity: Float
    unit: String
    price: Float
    description: String
}

input RequestUpdateInputs {
    title: String
    type: Type
    status: StatusType
    poster: String
    description: String
}

input NewUserInputs {
    username: String
    password: String
    firstName: String
    lastName: String
    phone: String
    email: String
    businessName: String
    businessWebsite: String
    businessType: BusinessType
}

#### Top level declarations

type Query {
    about: String!
    user: User!
    productList(
        type: Type
        dateMin: GraphQLDate
        dateMax: GraphQLDate
        search: String
        username: String
        page: Int = 1
    ): ProductListWithPages
    product(id: Int!): Product!
    productCounts(
        type: Type
        dateMin: GraphQLDate
        dateMax: GraphQLDate
    ): [ProductCounts!]!
    requestList(
        type: Type
        dateMin: GraphQLDate
        dateMax: GraphQLDate
        search: String
        username: String
        page: Int = 1
    ): RequestListWithPages
    request(id: Int!): Request!
    requestCounts(
        type: Type
        dateMin: GraphQLDate
        dateMax: GraphQLDate
    ): [RequestCounts!]!
}
type Mutation {
    setAboutMessage(message: String!): String
    productAdd(product: ProductInputs!): Product!
    productUpdate(id: Int!, changes: ProductUpdateInputs!): Product!
    productDelete(id: Int!): Boolean!
    productRestore(id: Int!): Boolean!
    requestAdd(request: RequestInputs!): Request!
    requestUpdate(id: Int!, changes: RequestUpdateInputs!): Request!
    requestDelete(id: Int!): Boolean!
    requestRestore(id: Int!): Boolean!
    register(newAccount: NewUserInputs!): User!
    login(username:String!, password: String!): LoginResponse!
}